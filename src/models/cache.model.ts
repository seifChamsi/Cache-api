import mongoose from "mongoose";
import bcrypt from "bcrypt";
import config from "config";
import { string } from "zod";

export interface CacheDocument extends mongoose.Document {
  key: string;
  value: string;
  ttl: Date;
}

const CacheSchema = new mongoose.Schema(
  {
    key: { type: String, unique: [true, "The key must be unique"] },
    //autogenerated
    value: { type: String, required: true },
    //autogenerated 5min
    ttl: { type: Date },
  },
  {
    timestamps: true,
  }
);

CacheSchema.pre("save", async function (next) {
  let cacheObject = this as CacheDocument;
  let ttl = new Date();
  ttl.setMinutes(ttl.getMinutes() + 5);

  cacheObject.ttl = ttl;
});

const CacheModel = mongoose.model("Cache", CacheSchema);

export default CacheModel;
